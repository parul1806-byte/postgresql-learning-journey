
CREATE TABLE departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50)
);

INSERT INTO departments (dept_id, dept_name) VALUES
(1, 'HR'),
(2, 'IT'),
(3, 'Finance'),
(4, 'Sales'),
(5, 'Marketing');

CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    dept_id INT,
    manager_id INT,
    salary DECIMAL(10,2),
    hire_date DATE,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);

INSERT INTO employees (emp_id, first_name, last_name, dept_id, manager_id, salary, hire_date) VALUES
(101, 'John', 'Doe', 2, NULL, 90000, '2018-03-15'),
(102, 'Alice', 'Smith', 2, 101, 70000, '2019-07-10'),
(103, 'Robert', 'Brown', 3, 101, 60000, '2020-01-20'),
(104, 'Emily', 'Davis', 1, 101, 45000, '2021-06-01'),
(105, 'Michael', 'Wilson', 4, 101, 55000, '2019-11-30'),
(106, 'Sophia', 'Taylor', 5, 101, 48000, '2022-02-17'),
(107, 'David', 'Johnson', 2, 101, 72000, '2020-12-05'),
(108, 'Emma', 'Thomas', 3, 101, 65000, '2018-09-25'),
(109, 'Daniel', 'White', 4, 101, 52000, '2021-01-15'),
(110, 'Olivia', 'Harris', NULL, 101, 40000, '2022-09-01');

CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name VARCHAR(100),
    dept_id INT,
    start_date DATE,
    end_date DATE,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);

INSERT INTO projects (project_id, project_name, dept_id, start_date, end_date) VALUES
(201, 'ERP Implementation', 2, '2020-01-01', '2021-12-31'),
(202, 'Website Redesign', 5, '2021-05-10', NULL),
(203, 'Financial Audit', 3, '2019-08-01', '2019-12-15'),
(204, 'Recruitment Drive', 1, '2022-03-01', '2022-06-30'),
(205, 'Sales Campaign', 4, '2022-07-01', NULL);



CREATE TABLE employee_project (
    emp_id INT,
    project_id INT,
    PRIMARY KEY (emp_id, project_id),
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id),
    FOREIGN KEY (project_id) REFERENCES projects(project_id)
);

INSERT INTO employee_project (emp_id, project_id) VALUES
(101, 201),
(102, 201),
(107, 201),
(106, 202),
(108, 203),
(103, 203),
(104, 204),
(105, 205),
(109, 205),
(110, 202);

--practice question
1--Write a query to display all columns from a table employees.
SELECT * FROM employees;

2--Select only first_name, last_name, and salary from employees.
SELECT first_name, last_name,salary from employees;

3--Display all employees whose salary is greater than 50,000.
SELECT first_name, last_name,salary from employees
WHERE salary > 50000;

4--Retrieve employees who belong to the department IT.
SELECT first_name, last_name from employees
WHERE dept_id = 1;

5--Show the details of employees ordered by salary in descending order.
SELECT first_name, last_name,salary from employees
ORDER BY salary DESC ;

6--Fetch the top 5 highest-paid employees.
SELECT first_name, last_name,salary from employees
ORDER BY salary ASC
LIMIT 5;

7--Display employees whose name starts with 'A'.
SELECT first_name, last_name,salary from employees
WHERE first_name LIKE 'A%';

8--Show employees who do not belong to department HR.
SELECT first_name, last_name,salary from employees
WHERE dept_id <> 3; 

9--Find employees whose salary is between 30,000 and 60,000.
SELECT first_name, last_name,salary from employees
where salary BETWEEN 30000 and 60000;

10-- Show employees who have NULL in manager_id
SELECT first_name, last_name from employees
WHERE  manager_id IS NOT NULL;


11--Section 2: Aggregates (COUNT, SUM, AVG, MIN, MAX, GROUP BY, HAVING)

12--Find the total number of employees.
SELECT COUNT( first_name ) FROM employees;

13--Calculate the average salary of employees.
SELECT AVG(salary) FROM employees;

14--Find the maximum and minimum salary in the company.
SELECT MAX(salary) FROM employees;

15--Count how many employees belong to each department.
SELECT MIN(salary) FROM employees;

16--Display the total salary paid to each department.
SELECT SUM(salary) FROM employees;

17--Show the departments having more than 5 employees.
SELECT dept_id, count(*) as total_employees FROM employees
group by dept_id
HAVING COUNT(*)>5
ORDER BY total_employees;

18--Find the average salary of employees in each job role.
SELECT  dept_id , AVG(salary) FROM employees
GROUP BY dept_id
;

19--Display the department with the highest average salary.
SELECT dept_id, AVG(salary) AS Avg_salary FROM employees
group by dept_id
ORDER BY Avg_salary DESC
LIMIT 1
;

20--Show the number of employees hired each year.
SELECT  DATE_PART( 'year',hire_date) AS hired_date,
count(*) as no_of_employee
FROM employees
GROUP BY  hire_date
order by hire_date;

21--Find the department which has the maximum number of employees
select dept_id,count(first_name) as employee_count from employees
group by dept_id
order by  employee_count  asc
limit 1;

22--Display employee names with their department names.
select first_name,dept_name from employees as e
join departments as d 
on e.dept_id = d.dept_id;

23--Show all employees along with their department, even if no department is assigned.
select first_name,dept_name from employees as e
left join departments as d 
on e.dept_id = d.dept_id;

24--Show departments with no employees.
select count(first_name) as no_of_employee,dept_name
from employees as e 
join departments as d 
on e.dept_id = d.dept_id
group by dept_name;

25--Retrieve employees with their manager’s name.


26--List employees working in the Finance department.
select first_name,dept_name from employees as e
join departments as d 
on e.dept_id = d.dept_id
where dept_name = 'Finance';

27--Find employees who earn more than the average salary of their department.
select dept_name, first_name from employees as e
join departments as d 
on e.dept_id = d.dept_id
where salary > (select avg(e2.salary)
from employees as e2 
where e2.dept_id = e.dept_id);

28--Display employees who work in the same department as 'John'.
select e.first_name from employees as e
where e.dept_id = (select e2.dept_id from employees e2 
where e2.first_name = 'John');


29--Show all employee-department combinations (CROSS JOIN).
select dept_name, first_name from employees as e
cross join departments as d ;

30--Find employees whose department name starts with S.
select first_name,dept_name from employees as e
join departments as d 
on e.dept_id = d.dept_id
where dept_name like 'S%';

31--Show the second-highest salary employee in each department.
SELECT dept_name ,first_name ,salary  from departments as d
join employees as e 
on d.dept_id = e.dept_id
where salary = (select max(e2.salary) from employees as e2
where e2.dept_id = e.dept_id and 
e2.salary < (select max(e3.salary) from employees as e3
where e3.dept_id = e.dept_id)
);

--Find employees whose salary is greater than the company’s average salary.
SELECT first_name from employees e
where e.salary >(select avg(e2.salary) from employees e2);

--Find the employee(s) with the maximum salary.
SELECT first_name from employees e
where e.salary >(select max(e2.salary) from employees e2);

--Display employees who earn more than their manager.
SELECT e.first_name from employees e
where e.salary > (
select e2.salary from employees e2 
where e.manager_id = e2.emp_id
);

--Retrieve employees who work in the same department as the employee with emp_id = 101.
select e.first_name from employees e
where e.dept_id = (select e2.dept_id from employees e2 where e2.emp_id = 101 );

--Show employees who earn less than the minimum salary of IT department.
select e.first_name from employees e
where e.salary < (select min(e2.salary)from employees e2 where dept_id = 2);

--Display the department name of the highest-paid employee.
select dept_name from departments d
join employees e 
on d.dept_id = e.dept_id
where e.salary = (select max(e2.salary) from employees e2
);

--Find employees who joined before the earliest hire date in the company.
select first_name from employees 
where hire_date <(select min(hire_date) from employees);

--Show employees whose salary matches the second-highest salary.
select first_name from employees
where salary = (select max(e2.salary)from employees e2 
where e2.salary < (select max(e3.salary)from employees e3));

--Find employees whose salary is above department average using a correlated subquery.
select e.first_name from employees e
where e.salary >(select avg(e2.salary) from employees e2
where e2.dept_id = e.dept_id)
;

--List employees who are not managers.
select e.first_name from employees e  where
e.emp_id  not in (select e2.manager_id from employees e2 
where  e2.manager_id is not null);
